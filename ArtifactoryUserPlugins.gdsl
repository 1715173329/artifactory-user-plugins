contributor(context(scriptScope())) {
    //global context
    property name: 'log', type: 'org.slf4j.Logger', doc:  'Writes to Artifactory log; logger name is the name of the script file '
    property name: 'repositories', type: 'org.artifactory.repo.Repositories', doc: 'Allows queries and operations on repositories and artifacts '
    property name: 'security', type: 'org.artifactory.security.Security', doc: 'Provides information about current security context, (e.g. current user and her permissions) '
    property name: 'searches', type: 'org.artifactory.search.Searches', doc: 'API for searching for artifacts and builds'
    property name: 'builds', type: 'org.artifactory.build.Builds', doc: 'Allows CRUD operations on builds'
    property name: 'ctx', type: 'org.artifactory.spring.InternalArtifactoryContext', doc: 'NOT A PUBLIC API - FOR INTERNAL USE ONLY!'

    //plugin types
    property name: 'download', type:'groovy.lang.Closure', doc: 'A section for handling and manipulating download events'
    property name: 'storage', type:'groovy.lang.Closure', doc: 'A section for handling and manipulating storage events'
    property name: 'jobs', type:'groovy.lang.Closure', doc: 'A section for defining scheduled jobs'
    property name: 'executions', type:'groovy.lang.Closure', doc: 'A section for defining external executions'
    property name: 'realms', type:'groovy.lang.Closure', doc: 'A section for management of security realms'
    property name: 'build', type:'groovy.lang.Closure', doc: 'A section for handling build info events'
    property name: 'promotions', type:'groovy.lang.Closure', doc: 'A section for defining REST executable build promotion operations'
    property name: 'staging', type:'groovy.lang.Closure', doc: 'A section for defining REST retrievable build staging strategy construction'
}

contributor(context(scope: closureScope()), {
    //download plugin
    if (enclosingCall('download')){
        property name: 'altResponse', type: 'groovy.lang.Closure', doc: 'Provide an alternative response, by one of the following methods:\n' +
                '(1) Setting a success/error status code value and an optional error message.\n' +
                '(2) Provide an alternative download content, by setting new values for the inputStream and size context variables.'
        property name: 'altRemotePath', type: 'groovy.lang.Closure', doc: 'Provides an alternative download path under the same remote repository, by setting a new value to the path variable.'
        property name: 'altRemoteContent', type: 'groovy.lang.Closure', doc: 'Provides an alternative download content, by setting new values for the inputStream and size context variables.'
        property name: 'afterDownloadError', type: 'groovy.lang.Closure', doc: 'In case of resolution error provides an alternative response, by setting a success/error status code value and an optional error message.'
        property name: 'beforeRemoteDownload', type: 'groovy.lang.Closure', doc: 'Handle before remote download events.'
        property name: 'afterRemoteDownload', type: 'groovy.lang.Closure', doc: 'Handle after remote download events.'
        property name: 'beforeDownload', type: 'groovy.lang.Closure', doc: 'Handle before local download events.'
    }
    if (enclosingCall('altResponse')) {
        //Context variables
        property name: 'status', type: 'java.lang.Integer', doc: 'a response status code. Defaults to -1 (unset).'
        property name: 'message', type: 'java.lang.String', doc: 'a text message to return in the response body, replacing the response content. Defaults to null.'
        property name: 'inputStream', type: 'java.io.InputStream', doc: 'a new stream that provides the response content. Defaults to null.'
        property name: 'size', type: 'java.lang.Long', doc: 'the size of the new content (helpful for clients processing the response). Defaults to -1.'
        //Closure params
        property name: 'request', type: 'org.artifactory.request.Request', doc: 'a read-only parameter of the request.'
        property name: 'responseRepoPath', type: 'org.artifactory.repo.RepoPath', doc: 'a read-only parameter of the response RepoPath (containing the physical repository the resource was found in).'
    }
    if (enclosingCall('altRemotePath')) {
        //Context variables
        property name: 'path', type: 'java.lang.String', doc: 'the new path value. Defaults to the original RepoPath\'s path.'
        //Closure params
        property name: 'repoPath', type: 'org.artifactory.repo.RepoPath', doc: 'a read-only parameter of the original request RepoPath.'
    }

    if (enclosingCall('altRemoteContent')) {
        //Context variables
        property name: 'status', type: 'java.lang.Integer', doc: 'a response status code. Defaults to -1 (unset).'
        property name: 'message', type: 'java.lang.String', doc: 'a text message to return in the response body, replacing the response content. Defaults to null.'
        property name: 'inputStream', type: 'java.io.InputStream', doc: 'a new stream that provides the response content. Defaults to null.'
        property name: 'size', type: 'java.lang.Long', doc: 'the size of the new content (helpful for clients processing the response). Defaults to -1.'
        //Closure params
        property name: 'repoPath', type: 'org.artifactory.repo.RepoPath', doc: 'a read-only parameter of the original request RepoPath.'
    }
    if (enclosingCall('afterDownloadError')) {
        //Context variables
        property name: 'status', type: 'java.lang.Integer', doc: 'a response status code. Defaults to -1 (unset).'
        property name: 'message', type: 'java.lang.String', doc: 'a text message to return in the response body, replacing the response content. Defaults to null.'
        property name: 'inputStream', type: 'java.io.InputStream', doc: 'a new stream that provides the response content. Defaults to null.'
        property name: 'size', type: 'java.lang.Long', doc: 'the size of the new content (helpful for clients processing the response). Defaults to -1.'
        //Closure params
        property name: 'request', type: 'org.artifactory.request.Request', doc: 'a read-only parameter of the request.'
    }
    if (enclosingCall('beforeRemoteDownload')) {
        //Closure params
        property name: 'request', type: 'org.artifactory.request.Request', doc: 'a read-only parameter of the request.'
        property name: 'repoPath', type: 'org.artifactory.repo.RepoPath', doc: 'a read-only parameter of the original request RepoPath.'
    }
    if (enclosingCall('afterRemoteDownload')) {
        //Closure params
        property name: 'request', type: 'org.artifactory.request.Request', doc: 'a read-only parameter of the request.'
        property name: 'repoPath', type: 'org.artifactory.repo.RepoPath', doc: 'a read-only parameter of the original request RepoPath.'
    }
    if (enclosingCall('beforeDownload')) {
        //Closure params
        property name: 'request', type: 'org.artifactory.request.Request', doc: 'a read-only parameter of the request.'
        property name: 'responseRepoPath', type: 'org.artifactory.repo.RepoPath', doc: 'a read-only parameter of the response RepoPath (containing the physical repository the resource was found in).'
    }
})